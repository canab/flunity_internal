<?xml version="1.0"?>
<view:ViewBase
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="shared.air.components.*"
		fontFamily="Tahoma"
		xmlns:view="flashexporter.view.*"
		>

	<fx:Script>
		<![CDATA[
		import actionlib.common.query.from;
		import actionlib.common.ui.Key;

		import flashexporter.commands.ExportSelectionCommand;
		import flashexporter.commands.PreviewSymbolCommand;
		import flashexporter.commands.ReloadDataCommand;
		import flashexporter.data.Swf;
		import flashexporter.data.Symbol;

		import mx.collections.ArrayCollection;
		import mx.utils.StringUtil;

		[Bindable]
		private var _files:ArrayCollection;

		[Bindable]
		private var _symbols:ArrayCollection = new ArrayCollection();

		[Bindable]
		private var _generateEnabled:Boolean = false;

		private var _areSettingsRestored:Boolean = false;

		[Bindable]
		private var _sheetSizes:ArrayCollection = new ArrayCollection(
				[64, 128, 256, 512, 1024, 2048, 4096]);

		override protected virtual function onInitialize():void
		{
			appData.fileChangedEvent.addListener(function ():void
			{
				if (actionEnabled)
					generateChangedFiles();
			})
		}

		override public function reload():void
		{
			fileList.saveSelection();
			symbolsList.saveSelection();

			var command:ReloadDataCommand = new ReloadDataCommand();
			command.completeEvent.addListener(onReloadComplete);
			runCommand(command);

			refreshState();
		}

		private function onReloadComplete():void
		{
			_files = toCollection(appData.files);

			if (!_areSettingsRestored)
			{
				_areSettingsRestored = true;
				fileList.restoreSelectionOrSelectFirst();
				refreshSymbols();
			}
			else
			{
				fileList.restoreSelectionOrSelectFirst();
				refreshSymbols();
				refreshFilter();
				symbolsList.restoreSelection();
			}
		}

		override protected virtual function refresh():void
		{
			symbolsList.validateProperties();
			_generateEnabled = actionEnabled && fileList.selectedItem;
		}

		private function refreshSymbols():void
		{
			var condition:Function = function (symbol:Symbol):Boolean
			{
				for each (var file:Swf in fileList.selectedItems)
				{
					if (symbol.bundleName == file.bundleName)
						return true;
				}
				return false;
			};

			var symbols:Array = from(appData.symbols)
					.where(condition)
					.select();

			_symbols = new ArrayCollection(symbols);

			refreshSheetParams();

			filterInput.setFocus();
		}

		private function refreshSheetParams():void
		{
			sheetParamsPanel.enabled = fileList.selectedItems.length == 1;

			if (!sheetParamsPanel.enabled)
			{
				sizeCombo.selectedItem = "";
				hdSizeCombo.selectedItem = "";
				return;
			}

			var swf:Swf = fileList.selectedItem as Swf;

			sizeCombo.selectedItem = swf.sheetParams.size;
			hdSizeCombo.selectedItem = swf.sheetParams.size2x;
		}

		private function saveSheetParams():void
		{
			var swf:Swf = fileList.selectedItem as Swf;
			swf.sheetParams.size = sizeCombo.selectedItem;
			swf.sheetParams.size2x = hdSizeCombo.selectedItem;
			swf.sheetParams.save();
		}

		private function previewAssets():void
		{
			runCommand(new PreviewSymbolCommand(symbolsList.selectedItem));
		}

		private function generateChangedFiles():void
		{
			var files:Vector.<Swf> = appData.getChangedFiles();
			runCommand(new ExportSelectionCommand(files));
		}

		private function generateSelection():void
		{
			app.saveUserSettings();

			var files:Vector.<Swf> = Vector.<Swf>(fileList.selectedItems);
			runCommand(new ExportSelectionCommand(files));
		}

		private function onChangeSelectedFiles():void
		{
			refreshSymbols();
			refreshFilter();
			refresh();
		}

		private function refreshFilter():void
		{
			_symbols.filterFunction = function (item:String):Boolean
			{
				var pattern:String = StringUtil.trim(filterInput.text).toLowerCase();
				return item.toLowerCase().indexOf(pattern) >= 0;
			};
			_symbols.refresh();
			symbolsList.selectedIndex = 0;
			refresh();
		}

		private function resetFilter():void
		{
			filterInput.text = "";
			refreshFilter();
		}

		//-- helpers --//

		override public virtual function onKeyDown():void
		{
			if (focusManager.getFocus() == filterInput)
				return;

			if (Key.SPACE.isPressed && _generateEnabled)
				generateSelection();
		}

		private function fileLabel(item:Object):String
		{
			var swf:Swf = item as Swf;
			if (!swf)
				return String(item);

			return swf.file.nativePath
					.replace(app.flashDir.nativePath, "")
					.replace(/[\/\\]/, "")
					+ (swf.isChanged ? "*" : "");
		}

		private function symbolLabel(item:Symbol):String
		{
			var parts:Array = item.id.split("$");

			var result:String = parts.shift().replace("::", " - ");

			if (parts.length > 0)
				result += " (" + parts.join(", ") + ")";

			return result;
		}

		override protected function refreshState():void
		{
			super.refreshState();
		}

		override public function get filters():Array
		{
			return super.filters;
		}

		private function onFilterKeyDown(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.DOWN)
				symbolsList.selectedIndex += 1;
			else if (event.keyCode == Keyboard.UP)
				symbolsList.selectedIndex -= 1;
			else if (event.keyCode == Keyboard.ENTER)
				previewAssets();
		}

		private function viewSpritesheet():void
		{
			for each (var swf:Swf in fileList.selectedItems)
			{
				for each (var fileName:String in ["texture.png.bytes", "texture$hd.png.bytes"])
				{
					var file:File = app.outputDir
							.resolvePath(swf.bundleName)
							.resolvePath(fileName);

					if (file.exists)
						showPngFile(file);
				}

			}
		}

		private function showPngFile(file:File):void
		{
			try
			{
				var tempFile:File = File.createTempFile();
				var pngFile:File = new File(tempFile.nativePath + ".png");
				tempFile.moveTo(pngFile, true);
				file.copyTo(pngFile, true);
				pngFile.openWithDefaultApplication();
			}
			catch (e:Error)
			{
				app.logger.error(e.message);
			}
		}
		]]>
	</fx:Script>

	<s:VGroup width="100%" height="100%"
	          paddingLeft="8"
	          paddingTop="0"
	          paddingRight="8"
	          paddingBottom="8"
			>

		<mx:Spacer height="10"/>

		<s:HGroup id="contentPanel" width="100%" height="100%">

			<s:VGroup id="filesListPanel"
			          height="100%"
			          width="180">
				<s:Label text="Files:"/>
				<components:AdvancedList width="100%" height="100%"
				                         id="fileList"
				                         dataProvider="{_files}"
				                         labelFunction="fileLabel"
				                         allowMultipleSelection="true"
				                         change="onChangeSelectedFiles()"/>
			</s:VGroup>

			<s:VGroup id="symbolsGroup"
			          height="100%"
			          width="100%">

				<s:Label text="Symbols:"/>
				<s:HGroup width="100%" height="100%">
					<components:AdvancedList width="100%" height="100%"
					                         id="symbolsList"
					                         dataProvider="{_symbols}"
					                         change="refresh()"
					                         labelFunction="symbolLabel"
					                         allowMultipleSelection="true"
					                         doubleClickEnabled="true"
					                         doubleClick="previewAssets()"
					                         toolTip="Double Click to preview bitmap"/>

					<s:VGroup width="140" height="100%">

						<s:VGroup width="100%" height="100%">

							<s:Label text="Search:"/>
							<s:HGroup width="100%">
								<s:TextInput id="filterInput"
								             width="100"
								             change="refreshFilter()"
								             keyDown="onFilterKeyDown(event)"/>

								<s:Button id="resetFilterButton"
								          label="x"
								          toolTip="Reset Filter"
								          width="{filterInput.height}"
								          height="{filterInput.height}"
								          click="resetFilter()"/>
							</s:HGroup>

							<s:Spacer height="10"/>

							<s:VGroup id="sheetParamsPanel" width="100%">
								<s:Label text="Sheet Size:"/>
								<s:DropDownList id="sizeCombo"
								                width="100"
								                dataProvider="{_sheetSizes}"
								                change="saveSheetParams()"/>

								<s:Label text="HD Size:"/>
								<s:DropDownList id="hdSizeCombo"
								                width="100"
									            dataProvider="{_sheetSizes}"
									            change="saveSheetParams()"/>
							</s:VGroup>


							<s:Spacer height="10"/>

							<s:HGroup>
								<s:Button
										width="100"
										label="Generate!"
										height="30"
										fontWeight="bold"
										click="generateSelection()"
										enabled="{_generateEnabled}"
										toolTip="SPACE"
										/>
								<s:Button
										label="X"
										width="30"
										height="30"
										toolTip="Cancel"
										click="cancelByUser()"
										visible="{cancelEnabled}"
										/>
							</s:HGroup>

							<s:Button label="View"
							          width="100"
							          toolTip="View generated spritesheet"
							          click="viewSpritesheet()"
							          enabled="{fileList.selectedItem != null}}"
									/>

						</s:VGroup>


						<s:Spacer height="100%"/>

						<s:CheckBox label="Auto generate"
						            selected="@{appData.autoGenerateEnabled}"
						            enabled="{actionEnabled}"
								/>

						<s:CheckBox label="Generate textures"
						            selected="@{appData.generateTextures}"
									enabled="{actionEnabled}"
								/>

						<s:CheckBox id="statCheckBox"
						            label="Show bitmap stats"
									selected="@{appData.showStats}"/>

					</s:VGroup>
				</s:HGroup>


			</s:VGroup>



		</s:HGroup>

	</s:VGroup>

</view:ViewBase>
